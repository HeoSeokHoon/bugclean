<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.winter.app.humanResource.HumanResourceDAO">

    <select id="getAskList" resultType="TempEmployeeVO">
        SELECT * FROM EMP_TEMP
    </select>

    <select id="getMemberList" resultType="Map">
        SELECT EMPLOYEE_NUM, NAME, NICKNAME, PHONE, ADDRESS,
        DEPARTMENT.DEP_NAME AS DEP_NAME,
        POSITION.POS_NAME AS POS_NAME,
        JOIN_DATE
        FROM EMPLOYEE
        LEFT JOIN DEPARTMENT ON EMPLOYEE.DEP_CODE = DEPARTMENT.DEP_CODE
        LEFT JOIN POSITION ON EMPLOYEE.POS_CODE = POSITION.POS_CODE
        WHERE RETIRED_DATE IS NULL
    </select>

    <select id="getResignationList" resultType="Map">
        SELECT EMPLOYEE_NUM, NAME, NICKNAME, PHONE, ADDRESS,
        DEPARTMENT.DEP_NAME AS DEP_NAME,
        POSITION.POS_NAME AS POS_NAME,
        JOIN_DATE, RETIRED_DATE
        FROM EMPLOYEE
        LEFT JOIN DEPARTMENT ON EMPLOYEE.DEP_CODE = DEPARTMENT.DEP_CODE
        LEFT JOIN POSITION ON EMPLOYEE.POS_CODE = POSITION.POS_CODE
        WHERE RETIRED_DATE IS NOT NULL
    </select>

    <select id="getVacationList" parameterType="Integer" resultType="Map">
        SELECT EMPLOYEE_NUM AS "사번",
        NAME AS "이름",
        LEVEL_DATE AS "근속연수",
        VAC_FULL AS "총연차일수",
        VAC_USED AS "사용연차일수",
        (VAC_FULL - VAC_USED) AS "잔여연차일수",
        DEP_NAME AS "부서"
        FROM EMPLOYEE
        LEFT JOIN DEPARTMENT USING (DEP_CODE)
        LEFT JOIN VACATION USING (EMPLOYEE_NUM)
        WHERE VAC_YEAR = #{year}
    </select>

    <select id="getSalaryList" parameterType="Integer" resultType="Map">
        SELECT EMPLOYEE_NUM,
        NAME,
        SALARY_ACCOUNT,
        SALARY_BANK,
        (SALARY_PAY*12) AS "SALARY_PAY",
        DEP_NAME
        FROM EMPLOYEE
        LEFT JOIN DEPARTMENT USING (DEP_CODE)
        LEFT JOIN SALARY USING (EMPLOYEE_NUM)
        WHERE SALARY_YEAR = #{year}
    </select>

    <select id="getDistinctValues" parameterType="Map" resultType="String">
        <choose>
            <when test="tableName == 'SALARY'">
                SELECT DISTINCT SALARY_YEAR
                FROM SALARY
                ORDER BY SALARY_YEAR DESC
            </when>
            <when test="tableName == 'VACATION'">
                SELECT DISTINCT VAC_YEAR
                FROM VACATION
                ORDER BY VAC_YEAR DESC
            </when>
        </choose>
    </select>

    <select id="getAttendanceList" parameterType="Map" resultType="Map">
        SELECT * FROM
        (SELECT ROWNUM R, N.* FROM
        (SELECT EMPLOYEE_NUM,TO_CHAR(ATTEND_DATE, 'YYYY-MM-DD') AS ATTEND_DATE,
        TO_CHAR(ATTEND_START_TIME, 'HH24:MI:SS') AS START_TIME,
        TO_CHAR(ATTEND_DONE, 'HH24:MI:SS') AS DONE_TIME,
        ATTEND_VAC, DEP_NAME, NAME,
        CASE
        WHEN TO_TIMESTAMP(TO_CHAR(ATTEND_START_TIME, 'HH24:MI:SS'), 'HH24:MI:SS') > TO_TIMESTAMP('09:00:00',
        'HH24:MI:SS') THEN '지각'
        ELSE '정상출근'
        END AS LATE
        FROM EMPLOYEE
        LEFT JOIN DEPARTMENT USING (DEP_CODE)
        LEFT JOIN ATTENDANCE USING (EMPLOYEE_NUM)
        WHERE ATTEND_DATE BETWEEN TO_DATE(#{startDate}, 'YYYY-MM-DD') AND TO_DATE(#{endDate}, 'YYYY-MM-DD')
        AND (EMPLOYEE_NUM LIKE '%'||#{pagination.search}||'%'
        OR ATTEND_DATE LIKE '%'||#{pagination.search}||'%'
        OR TO_CHAR(ATTEND_START_TIME, 'HH24:MI:SS') LIKE '%'||#{pagination.search}||'%'
        OR TO_CHAR(ATTEND_DONE, 'HH24:MI:SS') LIKE '%'||#{pagination.search}||'%'
        OR ATTEND_VAC LIKE '%'||#{pagination.search}||'%'
        OR DEP_NAME LIKE '%'||#{pagination.search}||'%'
        OR NAME LIKE '%'||#{pagination.search}||'%'
        OR (CASE
        WHEN TO_TIMESTAMP(TO_CHAR(ATTEND_START_TIME, 'HH24:MI:SS'), 'HH24:MI:SS') > TO_TIMESTAMP('09:00:00',
        'HH24:MI:SS') THEN '지각'
        ELSE '정상출근'
        END) LIKE '%'||#{pagination.search}||'%'
        )
        ORDER BY
        <choose>
            <when test="column == 'NAME'">
                NAME
            </when>
            <when test="column == 'ATTEND_DATE'">
                ATTEND_DATE
            </when>
            <when test="column == 'START_TIME'">
                START_TIME
            </when>
            <when test="column == 'DONE_TIME'">
                DONE_TIME
            </when>
            <when test="column == 'LATE'">
                LATE
            </when>
            <otherwise>
                EMPLOYEE_NUM
            </otherwise>
        </choose>
        <if test="dir != null">
            ${dir}
        </if>
        ) N
        ) WHERE R BETWEEN #{pagination.startRow} AND #{pagination.lastRow}
    </select>

    <select id="getTotalCount" resultType="Long" parameterType="Map">
        SELECT COUNT(EMPLOYEE_NUM) FROM EMPLOYEE
        LEFT JOIN DEPARTMENT USING (DEP_CODE)
        LEFT JOIN ATTENDANCE USING (EMPLOYEE_NUM)
        WHERE ATTEND_DATE BETWEEN TO_DATE(#{startDate}, 'YYYY-MM-DD') AND TO_DATE(#{endDate}, 'YYYY-MM-DD')
        AND (EMPLOYEE_NUM LIKE '%'||#{pagination.search}||'%'
        OR ATTEND_DATE LIKE '%'||#{pagination.search}||'%'
        OR TO_CHAR(ATTEND_START_TIME, 'HH24:MI:SS') LIKE '%'||#{pagination.search}||'%'
        OR TO_CHAR(ATTEND_DONE, 'HH24:MI:SS') LIKE '%'||#{pagination.search}||'%'
        OR ATTEND_VAC LIKE '%'||#{pagination.search}||'%'
        OR DEP_NAME LIKE '%'||#{pagination.search}||'%'
        OR NAME LIKE '%'||#{pagination.search}||'%'
        )
    </select>

    <select id="getTempMember" resultType="TempEmployeeVO" parameterType="String">
        SELECT * FROM EMP_TEMP WHERE USERNAME = #{userName}
    </select>

    <select id="getNextNum" resultType="String">
        SELECT LPAD(LPAD((COUNT(EMPLOYEE_NUM) + 1), 3, '0'),7,TO_CHAR(SYSDATE,'YYYY')) AS "NEXT_NUM"
        FROM EMPLOYEE
        WHERE SUBSTR(EMPLOYEE_NUM, 1, 4) = TO_CHAR(SYSDATE,'YYYY')
    </select>

    <select id="getManagerNum" resultType="String" parameterType="DepartmentVO">
        SELECT DEP_MANAGER FROM DEPARTMENT WHERE DEP_CODE = #{dep_code}
    </select>

    <insert id="setEmployee" parameterType="EmployeeVO">
        INSERT INTO EMPLOYEE
        (EMPLOYEE_NUM, DEP_CODE, POS_CODE, TYPE_CODE, USERNAME, PASSWORD, NAME, PHONE, JOIN_DATE, LEVEL_DATE, STATE, MANAGER_NUM)
        VALUES
        (#{employee_num}, #{departmentVO.dep_code}, #{positionVO.pos_code}, #{type_code}, #{username}, #{password}, #{name}, #{phone}, SYSDATE, #{level_date}, #{state}, #{manager_num})
    </insert>



    <delete id="delTempEmployee" parameterType="EmployeeVO">
        DELETE FROM EMP_TEMP WHERE USERNAME = #{username}
    </delete>

</mapper>